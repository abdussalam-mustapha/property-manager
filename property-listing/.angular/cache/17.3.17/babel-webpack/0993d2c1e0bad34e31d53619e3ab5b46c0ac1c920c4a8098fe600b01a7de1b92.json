{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage.service\";\nexport let PropertyService = /*#__PURE__*/(() => {\n  class PropertyService {\n    constructor(localStorageService) {\n      this.localStorageService = localStorageService;\n      const savedProperties = this.localStorageService.getItem('properties');\n      if (savedProperties && savedProperties.length > 0) {\n        this.propertiesSubject = new BehaviorSubject(savedProperties);\n      } else {\n        const sampleProperties = this.getSampleProperties();\n        this.propertiesSubject = new BehaviorSubject(sampleProperties);\n        this.localStorageService.setItem('properties', sampleProperties);\n      }\n      this.properties$ = this.propertiesSubject.asObservable();\n      this.properties$.subscribe(properties => {\n        this.localStorageService.setItem('properties', properties);\n      });\n    }\n    getSampleProperties() {\n      return [{\n        id: '1',\n        name: 'Modern Downtown Apartment',\n        type: 'Apartment',\n        location: 'Downtown',\n        price: 2500,\n        bedrooms: 2,\n        bathrooms: 2,\n        area: 1200,\n        description: 'Beautiful modern apartment in the heart of downtown',\n        dateAdded: new Date().toISOString()\n      }, {\n        id: '2',\n        name: 'Suburban Family House',\n        type: 'House',\n        location: 'Suburbs',\n        price: 4500,\n        bedrooms: 4,\n        bathrooms: 3,\n        area: 2400,\n        description: 'Spacious family home with large backyard',\n        dateAdded: new Date().toISOString()\n      }];\n    }\n    getProperties(searchTerm, filterType, filterLocation, sortBy, sortOrder) {\n      return this.properties$.pipe(map(properties => {\n        let filtered = properties.filter(property => {\n          const matchesSearch = property.name.toLowerCase().includes(searchTerm.toLowerCase()) || property.location.toLowerCase().includes(searchTerm.toLowerCase());\n          const matchesType = filterType === 'all' || property.type === filterType;\n          const matchesLocation = filterLocation === 'all' || property.location === filterLocation;\n          return matchesSearch && matchesType && matchesLocation;\n        });\n        filtered.sort((a, b) => {\n          let aValue = a[sortBy];\n          let bValue = b[sortBy];\n          if (typeof aValue === 'string') {\n            aValue = aValue.toLowerCase();\n            bValue = bValue.toLowerCase();\n          }\n          if (sortOrder === 'asc') {\n            return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n          } else {\n            return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n          }\n        });\n        return filtered;\n      }));\n    }\n    getUniqueLocations() {\n      return this.properties$.pipe(map(properties => [...new Set(properties.map(p => p.location))]));\n    }\n    addProperty(propertyData) {\n      const newProperty = {\n        ...propertyData,\n        id: Date.now().toString(),\n        dateAdded: new Date().toISOString()\n      };\n      const currentProperties = this.propertiesSubject.value;\n      this.propertiesSubject.next([...currentProperties, newProperty]);\n    }\n    updateProperty(updatedProperty) {\n      const currentProperties = this.propertiesSubject.value;\n      const updatedProperties = currentProperties.map(p => p.id === updatedProperty.id ? updatedProperty : p);\n      this.propertiesSubject.next(updatedProperties);\n    }\n    deleteProperty(id) {\n      const currentProperties = this.propertiesSubject.value;\n      const updatedProperties = currentProperties.filter(p => p.id !== id);\n      this.propertiesSubject.next(updatedProperties);\n    }\n    exportToCSV(properties) {\n      const headers = ['Name', 'Type', 'Location', 'Price', 'Bedrooms', 'Bathrooms', 'Area', 'Description'];\n      const csvContent = [headers.join(','), ...properties.map(property => [`\"${property.name}\"`, property.type, `\"${property.location}\"`, property.price, property.bedrooms, property.bathrooms, property.area, `\"${property.description}\"`].join(','))].join('\\n');\n      const blob = new Blob([csvContent], {\n        type: 'text/csv'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'properties.csv';\n      a.click();\n      window.URL.revokeObjectURL(url);\n    }\n    static {\n      this.ɵfac = function PropertyService_Factory(t) {\n        return new (t || PropertyService)(i0.ɵɵinject(i1.LocalStorageService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: PropertyService,\n        factory: PropertyService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return PropertyService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}