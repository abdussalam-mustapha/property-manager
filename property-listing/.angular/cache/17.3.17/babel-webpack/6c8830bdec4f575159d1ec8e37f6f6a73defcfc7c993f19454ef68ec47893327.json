{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class NotificationService {\n  constructor() {\n    this.notificationSubject = new Subject();\n  }\n  get notifications$() {\n    return this.notificationSubject.asObservable();\n  }\n  show(notification) {\n    this.notificationSubject.next(notification);\n  }\n  showSuccess(message) {\n    this.show({\n      message,\n      type: 'success'\n    });\n  }\n  showError(message) {\n    this.show({\n      message,\n      type: 'error'\n    });\n  }\n  showConfirmation(message, onConfirm) {\n    this.show({\n      message,\n      type: 'confirm',\n      onConfirm\n    });\n  }\n  hide() {\n    this.notificationSubject.next(null);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Subject","NotificationService","constructor","notificationSubject","notifications$","asObservable","show","notification","next","showSuccess","message","type","showError","showConfirmation","onConfirm","hide","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DELL\\Desktop\\property-manager\\property-listing\\app\\services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\nexport interface Notification {\r\n  message: string;\r\n  type: 'success' | 'error' | 'confirm';\r\n  onConfirm?: () => void;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private notificationSubject = new Subject<Notification | null>();\r\n\r\n  get notifications$(): Observable<Notification | null> {\r\n    return this.notificationSubject.asObservable();\r\n  }\r\n\r\n  show(notification: Notification): void {\r\n    this.notificationSubject.next(notification);\r\n  }\r\n\r\n  showSuccess(message: string): void {\r\n    this.show({ message, type: 'success' });\r\n  }\r\n\r\n  showError(message: string): void {\r\n    this.show({ message, type: 'error' });\r\n  }\r\n\r\n  showConfirmation(message: string, onConfirm: () => void): void {\r\n    this.show({ message, type: 'confirm', onConfirm });\r\n  }\r\n\r\n  hide(): void {\r\n    this.notificationSubject.next(null);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,QAAoB,MAAM;;AAW1C,OAAM,MAAOC,mBAAmB;EAHhCC,YAAA;IAIU,KAAAC,mBAAmB,GAAG,IAAIH,OAAO,EAAuB;;EAEhE,IAAII,cAAcA,CAAA;IAChB,OAAO,IAAI,CAACD,mBAAmB,CAACE,YAAY,EAAE;EAChD;EAEAC,IAAIA,CAACC,YAA0B;IAC7B,IAAI,CAACJ,mBAAmB,CAACK,IAAI,CAACD,YAAY,CAAC;EAC7C;EAEAE,WAAWA,CAACC,OAAe;IACzB,IAAI,CAACJ,IAAI,CAAC;MAAEI,OAAO;MAAEC,IAAI,EAAE;IAAS,CAAE,CAAC;EACzC;EAEAC,SAASA,CAACF,OAAe;IACvB,IAAI,CAACJ,IAAI,CAAC;MAAEI,OAAO;MAAEC,IAAI,EAAE;IAAO,CAAE,CAAC;EACvC;EAEAE,gBAAgBA,CAACH,OAAe,EAAEI,SAAqB;IACrD,IAAI,CAACR,IAAI,CAAC;MAAEI,OAAO;MAAEC,IAAI,EAAE,SAAS;MAAEG;IAAS,CAAE,CAAC;EACpD;EAEAC,IAAIA,CAAA;IACF,IAAI,CAACZ,mBAAmB,CAACK,IAAI,CAAC,IAAI,CAAC;EACrC;;;uBAzBWP,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAAe,OAAA,EAAnBf,mBAAmB,CAAAgB,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}