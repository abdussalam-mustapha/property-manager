{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage.service\";\nexport class PropertyService {\n  constructor(localStorageService) {\n    this.localStorageService = localStorageService;\n    const savedProperties = this.localStorageService.getItem('properties');\n    if (savedProperties && savedProperties.length > 0) {\n      this.propertiesSubject = new BehaviorSubject(savedProperties);\n    } else {\n      const sampleProperties = this.getSampleProperties();\n      this.propertiesSubject = new BehaviorSubject(sampleProperties);\n      this.localStorageService.setItem('properties', sampleProperties);\n    }\n    this.properties$ = this.propertiesSubject.asObservable();\n    this.properties$.subscribe(properties => {\n      this.localStorageService.setItem('properties', properties);\n    });\n  }\n  getSampleProperties() {\n    return [{\n      id: '1',\n      name: 'Modern Downtown Apartment',\n      type: 'Apartment',\n      location: 'Downtown',\n      price: 2500,\n      bedrooms: 2,\n      bathrooms: 2,\n      area: 1200,\n      description: 'Beautiful modern apartment in the heart of downtown',\n      dateAdded: new Date().toISOString()\n    }, {\n      id: '2',\n      name: 'Suburban Family House',\n      type: 'House',\n      location: 'Suburbs',\n      price: 4500,\n      bedrooms: 4,\n      bathrooms: 3,\n      area: 2400,\n      description: 'Spacious family home with large backyard',\n      dateAdded: new Date().toISOString()\n    }];\n  }\n  getProperties(searchTerm, filterType, filterLocation, sortBy, sortOrder) {\n    return this.properties$.pipe(map(properties => {\n      let filtered = properties.filter(property => {\n        const matchesSearch = property.name.toLowerCase().includes(searchTerm.toLowerCase()) || property.location.toLowerCase().includes(searchTerm.toLowerCase());\n        const matchesType = filterType === 'all' || property.type === filterType;\n        const matchesLocation = filterLocation === 'all' || property.location === filterLocation;\n        return matchesSearch && matchesType && matchesLocation;\n      });\n      filtered.sort((a, b) => {\n        let aValue = a[sortBy];\n        let bValue = b[sortBy];\n        if (typeof aValue === 'string') {\n          aValue = aValue.toLowerCase();\n          bValue = bValue.toLowerCase();\n        }\n        if (sortOrder === 'asc') {\n          return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n        } else {\n          return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n        }\n      });\n      return filtered;\n    }));\n  }\n  getUniqueLocations() {\n    return this.properties$.pipe(map(properties => [...new Set(properties.map(p => p.location))]));\n  }\n  addProperty(propertyData) {\n    const newProperty = {\n      ...propertyData,\n      id: Date.now().toString(),\n      dateAdded: new Date().toISOString()\n    };\n    const currentProperties = this.propertiesSubject.value;\n    this.propertiesSubject.next([...currentProperties, newProperty]);\n  }\n  updateProperty(updatedProperty) {\n    const currentProperties = this.propertiesSubject.value;\n    const updatedProperties = currentProperties.map(p => p.id === updatedProperty.id ? updatedProperty : p);\n    this.propertiesSubject.next(updatedProperties);\n  }\n  deleteProperty(id) {\n    const currentProperties = this.propertiesSubject.value;\n    const updatedProperties = currentProperties.filter(p => p.id !== id);\n    this.propertiesSubject.next(updatedProperties);\n  }\n  exportToCSV(properties) {\n    const headers = ['Name', 'Type', 'Location', 'Price', 'Bedrooms', 'Bathrooms', 'Area', 'Description'];\n    const csvContent = [headers.join(','), ...properties.map(property => [`\"${property.name}\"`, property.type, `\"${property.location}\"`, property.price, property.bedrooms, property.bathrooms, property.area, `\"${property.description}\"`].join(','))].join('\\n');\n    const blob = new Blob([csvContent], {\n      type: 'text/csv'\n    });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'properties.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n  static {\n    this.ɵfac = function PropertyService_Factory(t) {\n      return new (t || PropertyService)(i0.ɵɵinject(i1.LocalStorageService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PropertyService,\n      factory: PropertyService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","PropertyService","constructor","localStorageService","savedProperties","getItem","length","propertiesSubject","sampleProperties","getSampleProperties","setItem","properties$","asObservable","subscribe","properties","id","name","type","location","price","bedrooms","bathrooms","area","description","dateAdded","Date","toISOString","getProperties","searchTerm","filterType","filterLocation","sortBy","sortOrder","pipe","filtered","filter","property","matchesSearch","toLowerCase","includes","matchesType","matchesLocation","sort","a","b","aValue","bValue","getUniqueLocations","Set","p","addProperty","propertyData","newProperty","now","toString","currentProperties","value","next","updateProperty","updatedProperty","updatedProperties","deleteProperty","exportToCSV","headers","csvContent","join","blob","Blob","url","window","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","i0","ɵɵinject","i1","LocalStorageService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DELL\\Desktop\\prop-palace-manager\\property-listing\\app\\services\\property.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Property } from '../models/property.model';\nimport { LocalStorageService } from './local-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PropertyService {\n  private propertiesSubject: BehaviorSubject<Property[]>;\n  public properties$: Observable<Property[]>;\n\n  constructor(private localStorageService: LocalStorageService) {\n    const savedProperties = this.localStorageService.getItem<Property[]>('properties');\n    if (savedProperties && savedProperties.length > 0) {\n      this.propertiesSubject = new BehaviorSubject<Property[]>(savedProperties);\n    } else {\n      const sampleProperties = this.getSampleProperties();\n      this.propertiesSubject = new BehaviorSubject<Property[]>(sampleProperties);\n      this.localStorageService.setItem('properties', sampleProperties);\n    }\n    this.properties$ = this.propertiesSubject.asObservable();\n\n    this.properties$.subscribe(properties => {\n        this.localStorageService.setItem('properties', properties);\n    });\n  }\n\n  private getSampleProperties(): Property[] {\n    return [\n      {\n        id: '1',\n        name: 'Modern Downtown Apartment',\n        type: 'Apartment',\n        location: 'Downtown',\n        price: 2500,\n        bedrooms: 2,\n        bathrooms: 2,\n        area: 1200,\n        description: 'Beautiful modern apartment in the heart of downtown',\n        dateAdded: new Date().toISOString()\n      },\n      {\n        id: '2',\n        name: 'Suburban Family House',\n        type: 'House',\n        location: 'Suburbs',\n        price: 4500,\n        bedrooms: 4,\n        bathrooms: 3,\n        area: 2400,\n        description: 'Spacious family home with large backyard',\n        dateAdded: new Date().toISOString()\n      }\n    ];\n  }\n\n  getProperties(\n    searchTerm: string,\n    filterType: string,\n    filterLocation: string,\n    sortBy: string,\n    sortOrder: 'asc' | 'desc'\n  ): Observable<Property[]> {\n    return this.properties$.pipe(\n      map(properties => {\n        let filtered = properties.filter(property => {\n          const matchesSearch = property.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                               property.location.toLowerCase().includes(searchTerm.toLowerCase());\n          const matchesType = filterType === 'all' || property.type === filterType;\n          const matchesLocation = filterLocation === 'all' || property.location === filterLocation;\n          return matchesSearch && matchesType && matchesLocation;\n        });\n\n        filtered.sort((a, b) => {\n          let aValue: any = a[sortBy as keyof Property];\n          let bValue: any = b[sortBy as keyof Property];\n          \n          if (typeof aValue === 'string') {\n            aValue = aValue.toLowerCase();\n            bValue = bValue.toLowerCase();\n          }\n          \n          if (sortOrder === 'asc') {\n            return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n          } else {\n            return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n          }\n        });\n\n        return filtered;\n      })\n    );\n  }\n\n  getUniqueLocations(): Observable<string[]> {\n      return this.properties$.pipe(\n          map(properties => [...new Set(properties.map(p => p.location))])\n      );\n  }\n\n  addProperty(propertyData: Omit<Property, 'id' | 'dateAdded'>): void {\n    const newProperty: Property = {\n      ...propertyData,\n      id: Date.now().toString(),\n      dateAdded: new Date().toISOString()\n    };\n    const currentProperties = this.propertiesSubject.value;\n    this.propertiesSubject.next([...currentProperties, newProperty]);\n  }\n\n  updateProperty(updatedProperty: Property): void {\n    const currentProperties = this.propertiesSubject.value;\n    const updatedProperties = currentProperties.map(p =>\n      p.id === updatedProperty.id ? updatedProperty : p\n    );\n    this.propertiesSubject.next(updatedProperties);\n  }\n\n  deleteProperty(id: string): void {\n    const currentProperties = this.propertiesSubject.value;\n    const updatedProperties = currentProperties.filter(p => p.id !== id);\n    this.propertiesSubject.next(updatedProperties);\n  }\n\n  exportToCSV(properties: Property[]): void {\n    const headers = ['Name', 'Type', 'Location', 'Price', 'Bedrooms', 'Bathrooms', 'Area', 'Description'];\n    const csvContent = [\n      headers.join(','),\n      ...properties.map(property => [\n        `\"${property.name}\"`,\n        property.type,\n        `\"${property.location}\"`,\n        property.price,\n        property.bedrooms,\n        property.bathrooms,\n        property.area,\n        `\"${property.description}\"`\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'properties.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}