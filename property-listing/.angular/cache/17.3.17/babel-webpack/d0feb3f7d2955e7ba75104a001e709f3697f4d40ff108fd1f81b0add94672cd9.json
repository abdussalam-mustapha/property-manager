{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage.service\";\nexport class PropertyService {\n  constructor(localStorageService) {\n    this.localStorageService = localStorageService;\n    const savedProperties = this.localStorageService.getItem('properties');\n    if (savedProperties && savedProperties.length > 0) {\n      this.propertiesSubject = new BehaviorSubject(savedProperties);\n    } else {\n      const sampleProperties = [];\n      this.propertiesSubject = new BehaviorSubject(sampleProperties);\n      this.localStorageService.setItem('properties', sampleProperties);\n    }\n    this.properties$ = this.propertiesSubject.asObservable();\n    this.properties$.subscribe(properties => {\n      this.localStorageService.setItem('properties', properties);\n    });\n  }\n  getProperties(searchTerm, filterType, filterLocation, sortBy, sortOrder) {\n    return this.properties$.pipe(map(properties => {\n      let filtered = properties.filter(property => {\n        const matchesSearch = property.name.toLowerCase().includes(searchTerm.toLowerCase()) || property.location.toLowerCase().includes(searchTerm.toLowerCase());\n        const matchesType = filterType === 'all' || property.type === filterType;\n        const matchesLocation = filterLocation === 'all' || property.location === filterLocation;\n        return matchesSearch && matchesType && matchesLocation;\n      });\n      filtered.sort((a, b) => {\n        let aValue = a[sortBy];\n        let bValue = b[sortBy];\n        if (typeof aValue === 'string') {\n          aValue = aValue.toLowerCase();\n          bValue = bValue.toLowerCase();\n        }\n        if (sortOrder === 'asc') {\n          return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n        } else {\n          return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n        }\n      });\n      return filtered;\n    }));\n  }\n  getUniqueLocations() {\n    return this.properties$.pipe(map(properties => [...new Set(properties.map(p => p.location))]));\n  }\n  addProperty(propertyData) {\n    const newProperty = {\n      ...propertyData,\n      id: Date.now().toString(),\n      dateAdded: new Date().toISOString()\n    };\n    const currentProperties = this.propertiesSubject.value;\n    this.propertiesSubject.next([...currentProperties, newProperty]);\n  }\n  updateProperty(updatedProperty) {\n    const currentProperties = this.propertiesSubject.value;\n    const updatedProperties = currentProperties.map(p => p.id === updatedProperty.id ? updatedProperty : p);\n    this.propertiesSubject.next(updatedProperties);\n  }\n  deleteProperty(id) {\n    const currentProperties = this.propertiesSubject.value;\n    const updatedProperties = currentProperties.filter(p => p.id !== id);\n    this.propertiesSubject.next(updatedProperties);\n  }\n  exportToCSV(properties) {\n    const headers = ['Name', 'Type', 'Location', 'Price', 'Bedrooms', 'Bathrooms', 'Area', 'Description'];\n    const csvContent = [headers.join(','), ...properties.map(property => [`\"${property.name}\"`, property.type, `\"${property.location}\"`, property.price, property.bedrooms, property.bathrooms, property.area, `\"${property.description}\"`].join(','))].join('\\n');\n    const blob = new Blob([csvContent], {\n      type: 'text/csv'\n    });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'properties.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n  static {\n    this.ɵfac = function PropertyService_Factory(t) {\n      return new (t || PropertyService)(i0.ɵɵinject(i1.LocalStorageService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PropertyService,\n      factory: PropertyService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","PropertyService","constructor","localStorageService","savedProperties","getItem","length","propertiesSubject","sampleProperties","setItem","properties$","asObservable","subscribe","properties","getProperties","searchTerm","filterType","filterLocation","sortBy","sortOrder","pipe","filtered","filter","property","matchesSearch","name","toLowerCase","includes","location","matchesType","type","matchesLocation","sort","a","b","aValue","bValue","getUniqueLocations","Set","p","addProperty","propertyData","newProperty","id","Date","now","toString","dateAdded","toISOString","currentProperties","value","next","updateProperty","updatedProperty","updatedProperties","deleteProperty","exportToCSV","headers","csvContent","join","price","bedrooms","bathrooms","area","description","blob","Blob","url","window","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","i0","ɵɵinject","i1","LocalStorageService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DELL\\Desktop\\prop-palace-manager\\property-listing\\app\\services\\property.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Property } from '../models/property.model';\nimport { LocalStorageService } from './local-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PropertyService {\n  private propertiesSubject: BehaviorSubject<Property[]>;\n  public properties$: Observable<Property[]>;\n\n  constructor(private localStorageService: LocalStorageService) {\n    const savedProperties = this.localStorageService.getItem<Property[]>('properties');\n    if (savedProperties && savedProperties.length > 0) {\n      this.propertiesSubject = new BehaviorSubject<Property[]>(savedProperties);\n    } else {\n      const sampleProperties: Property[] = [];\n      this.propertiesSubject = new BehaviorSubject<Property[]>(sampleProperties);\n      this.localStorageService.setItem('properties', sampleProperties);\n    }\n    this.properties$ = this.propertiesSubject.asObservable();\n\n    this.properties$.subscribe(properties => {\n        this.localStorageService.setItem('properties', properties);\n    });\n  }\n\n  getProperties(\n    searchTerm: string,\n    filterType: string,\n    filterLocation: string,\n    sortBy: string,\n    sortOrder: 'asc' | 'desc'\n  ): Observable<Property[]> {\n    return this.properties$.pipe(\n      map(properties => {\n        let filtered = properties.filter(property => {\n          const matchesSearch = property.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                               property.location.toLowerCase().includes(searchTerm.toLowerCase());\n          const matchesType = filterType === 'all' || property.type === filterType;\n          const matchesLocation = filterLocation === 'all' || property.location === filterLocation;\n          return matchesSearch && matchesType && matchesLocation;\n        });\n\n        filtered.sort((a, b) => {\n          let aValue: any = a[sortBy as keyof Property];\n          let bValue: any = b[sortBy as keyof Property];\n          \n          if (typeof aValue === 'string') {\n            aValue = aValue.toLowerCase();\n            bValue = bValue.toLowerCase();\n          }\n          \n          if (sortOrder === 'asc') {\n            return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n          } else {\n            return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n          }\n        });\n\n        return filtered;\n      })\n    );\n  }\n\n  getUniqueLocations(): Observable<string[]> {\n      return this.properties$.pipe(\n          map(properties => [...new Set(properties.map(p => p.location))])\n      );\n  }\n\n  addProperty(propertyData: Omit<Property, 'id' | 'dateAdded'>): void {\n    const newProperty: Property = {\n      ...propertyData,\n      id: Date.now().toString(),\n      dateAdded: new Date().toISOString()\n    };\n    const currentProperties = this.propertiesSubject.value;\n    this.propertiesSubject.next([...currentProperties, newProperty]);\n  }\n\n  updateProperty(updatedProperty: Property): void {\n    const currentProperties = this.propertiesSubject.value;\n    const updatedProperties = currentProperties.map(p =>\n      p.id === updatedProperty.id ? updatedProperty : p\n    );\n    this.propertiesSubject.next(updatedProperties);\n  }\n\n  deleteProperty(id: string): void {\n    const currentProperties = this.propertiesSubject.value;\n    const updatedProperties = currentProperties.filter(p => p.id !== id);\n    this.propertiesSubject.next(updatedProperties);\n  }\n\n  exportToCSV(properties: Property[]): void {\n    const headers = ['Name', 'Type', 'Location', 'Price', 'Bedrooms', 'Bathrooms', 'Area', 'Description'];\n    const csvContent = [\n      headers.join(','),\n      ...properties.map(property => [\n        `\"${property.name}\"`,\n        property.type,\n        `\"${property.location}\"`,\n        property.price,\n        property.bedrooms,\n        property.bathrooms,\n        property.area,\n        `\"${property.description}\"`\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'properties.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}