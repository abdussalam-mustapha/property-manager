{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { LoginComponent } from '../login/login.component';\nlet HeaderComponent = class HeaderComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.isLoginOpen = false;\n    this.currentUser$ = this.authService.currentUser;\n  }\n  ngOnInit() {}\n  logout() {\n    this.authService.logout();\n    // In a real app, you'd show a toast notification here.\n    console.log('Logged out');\n  }\n  openLogin() {\n    this.isLoginOpen = true;\n  }\n  onLoginDialogClose(loggedIn) {\n    this.isLoginOpen = false;\n    if (loggedIn) {\n      // In a real app, you'd show a toast notification here.\n      console.log('Logged in');\n    }\n  }\n};\nHeaderComponent = __decorate([Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, RouterModule, LoginComponent],\n  template: `\n    <header class=\"app-header\">\n      <nav class=\"header-nav\">\n        <h1 class=\"app-title\">\n          <a routerLink=\"/\">Property Palace Manager</a>\n        </h1>\n        <div class=\"header-actions\">\n          <ng-container *ngIf=\"currentUser$ | async as user; else guestView\">\n            <span class=\"welcome-message\">Welcome, {{ user.username }} ({{ user.role }})</span>\n            <button (click)=\"logout()\" class=\"btn btn-logout\">\n              Logout\n            </button>\n          </ng-container>\n          <ng-template #guestView>\n            <button (click)=\"openLogin()\" class=\"btn btn-login\">\n              Login\n            </button>\n          </ng-template>\n        </div>\n      </nav>\n    </header>\n\n    <app-login *ngIf=\"isLoginOpen\" (closeDialog)=\"onLoginDialogClose($event)\"></app-login>\n  `,\n  styleUrls: ['./header.component.css']\n})], HeaderComponent);\nexport { HeaderComponent };","map":{"version":3,"names":["Component","CommonModule","RouterModule","LoginComponent","HeaderComponent","constructor","authService","isLoginOpen","currentUser$","currentUser","ngOnInit","logout","console","log","openLogin","onLoginDialogClose","loggedIn","__decorate","selector","standalone","imports","template","styleUrls"],"sources":["C:\\Users\\DELL\\Desktop\\prop-palace-manager\\property-listing\\app\\components\\header\\header.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { User } from '../../models/user.model';\nimport { AuthService } from '../../services/auth.service';\nimport { LoginComponent } from '../login/login.component';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, RouterModule, LoginComponent],\n  template: `\n    <header class=\"app-header\">\n      <nav class=\"header-nav\">\n        <h1 class=\"app-title\">\n          <a routerLink=\"/\">Property Palace Manager</a>\n        </h1>\n        <div class=\"header-actions\">\n          <ng-container *ngIf=\"currentUser$ | async as user; else guestView\">\n            <span class=\"welcome-message\">Welcome, {{ user.username }} ({{ user.role }})</span>\n            <button (click)=\"logout()\" class=\"btn btn-logout\">\n              Logout\n            </button>\n          </ng-container>\n          <ng-template #guestView>\n            <button (click)=\"openLogin()\" class=\"btn btn-login\">\n              Login\n            </button>\n          </ng-template>\n        </div>\n      </nav>\n    </header>\n\n    <app-login *ngIf=\"isLoginOpen\" (closeDialog)=\"onLoginDialogClose($event)\"></app-login>\n  `,\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  currentUser$: Observable<User | null>;\n  isLoginOpen = false;\n\n  constructor(private authService: AuthService) {\n    this.currentUser$ = this.authService.currentUser;\n  }\n\n  ngOnInit(): void {}\n\n  logout(): void {\n    this.authService.logout();\n    // In a real app, you'd show a toast notification here.\n    console.log('Logged out');\n  }\n\n  openLogin(): void {\n    this.isLoginOpen = true;\n  }\n\n  onLoginDialogClose(loggedIn: boolean): void {\n    this.isLoginOpen = false;\n    if (loggedIn) {\n      // In a real app, you'd show a toast notification here.\n      console.log('Logged in');\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,YAAY,QAAQ,iBAAiB;AAI9C,SAASC,cAAc,QAAQ,0BAA0B;AAgClD,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAI1BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAF/B,KAAAC,WAAW,GAAG,KAAK;IAGjB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACF,WAAW,CAACG,WAAW;EAClD;EAEAC,QAAQA,CAAA,GAAU;EAElBC,MAAMA,CAAA;IACJ,IAAI,CAACL,WAAW,CAACK,MAAM,EAAE;IACzB;IACAC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EAC3B;EAEAC,SAASA,CAAA;IACP,IAAI,CAACP,WAAW,GAAG,IAAI;EACzB;EAEAQ,kBAAkBA,CAACC,QAAiB;IAClC,IAAI,CAACT,WAAW,GAAG,KAAK;IACxB,IAAIS,QAAQ,EAAE;MACZ;MACAJ,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;;EAE5B;CACD;AA3BYT,eAAe,GAAAa,UAAA,EA9B3BjB,SAAS,CAAC;EACTkB,QAAQ,EAAE,YAAY;EACtBC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAACnB,YAAY,EAAEC,YAAY,EAAEC,cAAc,CAAC;EACrDkB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;GAuBT;EACDC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWlB,eAAe,CA2B3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}