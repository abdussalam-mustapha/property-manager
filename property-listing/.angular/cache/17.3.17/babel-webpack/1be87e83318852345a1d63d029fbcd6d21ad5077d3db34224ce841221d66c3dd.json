{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth.service\";\nexport class LoginComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.closeDialog = new EventEmitter();\n  }\n  login(role) {\n    const username = role === 'Admin' ? 'Admin User' : 'Regular User';\n    this.authService.login(username, role);\n    this.closeDialog.emit(true);\n    // In a real app, you'd show a toast notification here.\n    console.log(`Logged in as ${role}`);\n  }\n  close() {\n    this.closeDialog.emit(false);\n  }\n  static {\n    this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      outputs: {\n        closeDialog: \"closeDialog\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 18,\n      vars: 0,\n      consts: [[1, \"login-overlay\", 3, \"click\"], [1, \"login-dialog-container\"], [1, \"login-dialog\"], [1, \"dialog-header\"], [1, \"close-button\", 3, \"click\"], [1, \"dialog-body\"], [1, \"dialog-subheading\"], [1, \"button-group\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"dialog-footer-text\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵlistener(\"click\", function LoginComponent_Template_div_click_0_listener() {\n            return ctx.close();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h3\");\n          i0.ɵɵtext(5, \"Login to Property Palace\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_6_listener() {\n            return ctx.close();\n          });\n          i0.ɵɵtext(7, \"\\u00D7\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"div\", 5)(9, \"p\", 6);\n          i0.ɵɵtext(10, \" For demonstration purposes, please select a role to log in. \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 7)(12, \"button\", 8);\n          i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_12_listener() {\n            return ctx.login(\"Admin\");\n          });\n          i0.ɵɵtext(13, \" Login as Admin \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_14_listener() {\n            return ctx.login(\"User\");\n          });\n          i0.ɵɵtext(15, \" Login as User \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(16, \"p\", 10);\n          i0.ɵɵtext(17, \" Admin: Full CRUD access | User: Read-only access \");\n          i0.ɵɵelementEnd()()()();\n        }\n      },\n      dependencies: [CommonModule],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["EventEmitter","CommonModule","LoginComponent","constructor","authService","closeDialog","login","role","username","emit","console","log","close","i0","ɵɵdirectiveInject","i1","AuthService","selectors","outputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","LoginComponent_Template_div_click_0_listener","ɵɵelementEnd","ɵɵtext","LoginComponent_Template_button_click_6_listener","LoginComponent_Template_button_click_12_listener","LoginComponent_Template_button_click_14_listener","styles"],"sources":["C:\\Users\\DELL\\Desktop\\prop-palace-manager\\property-listing\\app\\components\\login\\login.component.ts","C:\\Users\\DELL\\Desktop\\prop-palace-manager\\property-listing\\app\\components\\login\\login.component.html"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  @Output() closeDialog = new EventEmitter<boolean>();\n\n  constructor(private authService: AuthService) { }\n\n  login(role: 'Admin' | 'User'): void {\n    const username = role === 'Admin' ? 'Admin User' : 'Regular User';\n    this.authService.login(username, role);\n    this.closeDialog.emit(true);\n    // In a real app, you'd show a toast notification here.\n    console.log(`Logged in as ${role}`);\n  }\n\n  close(): void {\n    this.closeDialog.emit(false);\n  }\n}\n","<div class=\"login-overlay\" (click)=\"close()\"></div>\n<div class=\"login-dialog-container\">\n  <div class=\"login-dialog\">\n    <div class=\"dialog-header\">\n      <h3>Login to Property Palace</h3>\n      <button (click)=\"close()\" class=\"close-button\">&times;</button>\n    </div>\n    <div class=\"dialog-body\">\n      <p class=\"dialog-subheading\">\n        For demonstration purposes, please select a role to log in.\n      </p>\n      <div class=\"button-group\">\n        <button (click)=\"login('Admin')\" class=\"btn btn-primary\">\n          Login as Admin\n        </button>\n        <button (click)=\"login('User')\" class=\"btn btn-secondary\">\n          Login as User\n        </button>\n      </div>\n      <p class=\"dialog-footer-text\">\n        Admin: Full CRUD access | User: Read-only access\n      </p>\n    </div>\n  </div>\n</div>\n\n"],"mappings":"AAAA,SAAoBA,YAAY,QAAgB,eAAe;AAC/D,SAASC,YAAY,QAAQ,iBAAiB;;;AAU9C,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAFrB,KAAAC,WAAW,GAAG,IAAIL,YAAY,EAAW;EAEH;EAEhDM,KAAKA,CAACC,IAAsB;IAC1B,MAAMC,QAAQ,GAAGD,IAAI,KAAK,OAAO,GAAG,YAAY,GAAG,cAAc;IACjE,IAAI,CAACH,WAAW,CAACE,KAAK,CAACE,QAAQ,EAAED,IAAI,CAAC;IACtC,IAAI,CAACF,WAAW,CAACI,IAAI,CAAC,IAAI,CAAC;IAC3B;IACAC,OAAO,CAACC,GAAG,CAAC,gBAAgBJ,IAAI,EAAE,CAAC;EACrC;EAEAK,KAAKA,CAAA;IACH,IAAI,CAACP,WAAW,CAACI,IAAI,CAAC,KAAK,CAAC;EAC9B;;;uBAfWP,cAAc,EAAAW,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;YAAdd,cAAc;MAAAe,SAAA;MAAAC,OAAA;QAAAb,WAAA;MAAA;MAAAc,UAAA;MAAAC,QAAA,GAAAP,EAAA,CAAAQ,mBAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCX3Bd,EAAA,CAAAgB,cAAA,aAA6C;UAAlBhB,EAAA,CAAAiB,UAAA,mBAAAC,6CAAA;YAAA,OAASH,GAAA,CAAAhB,KAAA,EAAO;UAAA,EAAC;UAACC,EAAA,CAAAmB,YAAA,EAAM;UAI7CnB,EAHN,CAAAgB,cAAA,aAAoC,aACR,aACG,SACrB;UAAAhB,EAAA,CAAAoB,MAAA,+BAAwB;UAAApB,EAAA,CAAAmB,YAAA,EAAK;UACjCnB,EAAA,CAAAgB,cAAA,gBAA+C;UAAvChB,EAAA,CAAAiB,UAAA,mBAAAI,gDAAA;YAAA,OAASN,GAAA,CAAAhB,KAAA,EAAO;UAAA,EAAC;UAAsBC,EAAA,CAAAoB,MAAA,aAAO;UACxDpB,EADwD,CAAAmB,YAAA,EAAS,EAC3D;UAEJnB,EADF,CAAAgB,cAAA,aAAyB,WACM;UAC3BhB,EAAA,CAAAoB,MAAA,qEACF;UAAApB,EAAA,CAAAmB,YAAA,EAAI;UAEFnB,EADF,CAAAgB,cAAA,cAA0B,iBACiC;UAAjDhB,EAAA,CAAAiB,UAAA,mBAAAK,iDAAA;YAAA,OAASP,GAAA,CAAAtB,KAAA,CAAM,OAAO,CAAC;UAAA,EAAC;UAC9BO,EAAA,CAAAoB,MAAA,wBACF;UAAApB,EAAA,CAAAmB,YAAA,EAAS;UACTnB,EAAA,CAAAgB,cAAA,iBAA0D;UAAlDhB,EAAA,CAAAiB,UAAA,mBAAAM,iDAAA;YAAA,OAASR,GAAA,CAAAtB,KAAA,CAAM,MAAM,CAAC;UAAA,EAAC;UAC7BO,EAAA,CAAAoB,MAAA,uBACF;UACFpB,EADE,CAAAmB,YAAA,EAAS,EACL;UACNnB,EAAA,CAAAgB,cAAA,aAA8B;UAC5BhB,EAAA,CAAAoB,MAAA,0DACF;UAGNpB,EAHM,CAAAmB,YAAA,EAAI,EACA,EACF,EACF;;;qBDjBM/B,YAAY;MAAAoC,MAAA;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}